# Multi-stage Dockerfile for deploying Backend + Frontend on single Cloud Run instance
# Architecture: Nginx as reverse proxy, Backend on :8080, Frontend on :3000

# ================================
# Stage 1: Build Backend
# ================================
FROM python:3.12.11-slim-bookworm AS backend-builder

WORKDIR /app/backend

# Install uv for faster Python package management
COPY --from=ghcr.io/astral-sh/uv:0.8.11 /uv /usr/local/bin/uv

# Configure uv for Docker (compatible with standard Docker)
ENV UV_LINK_MODE=copy
ENV UV_COMPILE_BYTECODE=1

# Copy dependency files first for better layer caching
COPY backend/pyproject.toml backend/uv.lock ./

# Install dependencies only (without project source)
RUN uv sync --frozen --no-dev --no-install-project

# Copy source code and install project
COPY backend/ ./

# ================================
# Stage 2: Build Frontend
# ================================
FROM node:20-slim AS frontend-builder

WORKDIR /app/frontend

# Install pnpm
RUN npm install -g pnpm@10.14.0

# Copy package files
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --no-frozen-lockfile

# Copy frontend source code (excluding node_modules to preserve installed packages)
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/next.config.ts frontend/tsconfig.json frontend/postcss.config.mjs frontend/vitest.config.ts ./
COPY frontend/middleware.ts ./
COPY frontend/eslint.config.mjs ./
# Note: next-env.d.ts is auto-generated by Next.js and excluded from git, no need to copy

# Build Next.js with standalone output
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
ENV NEXT_PUBLIC_APP_ENV=${NEXT_PUBLIC_APP_ENV}

RUN pnpm build

# ================================
# Stage 3: Runtime - Multi-service
# ================================
FROM nginx:bookworm

# Set shell options for better error handling
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install Node.js 20 and required system libraries (NO Python from apt)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    libsecret-1-0 \
    supervisor \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y --no-install-recommends nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy Python 3.12 from backend-builder (ensures architecture match)
COPY --from=backend-builder /usr/local/bin/python3.12 /usr/local/bin/python3.12
COPY --from=backend-builder /usr/local/lib/python3.12 /usr/local/lib/python3.12
COPY --from=backend-builder /usr/local/lib/libpython3.12.so.1.0 /usr/local/lib/libpython3.12.so.1.0

# Create symlinks for Python binary and shared library
RUN ln -sf /usr/local/bin/python3.12 /usr/local/bin/python3 && \
    ln -sf /usr/local/bin/python3.12 /usr/local/bin/python && \
    ln -sf /usr/local/lib/libpython3.12.so.1.0 /usr/local/lib/libpython3.12.so && \
    ldconfig

# Install uv in runtime
COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# Create app directories
WORKDIR /app

# Copy backend from builder
COPY --from=backend-builder /app/backend /app/backend

# Copy frontend standalone build from builder
# Next.js standalone output structure: .next/standalone/frontend/*
COPY --from=frontend-builder /app/frontend/.next/standalone/frontend /app/frontend
COPY --from=frontend-builder /app/frontend/.next/static /app/frontend/.next/static
COPY --from=frontend-builder /app/frontend/public /app/frontend/public

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy supervisor configuration
COPY supervisord.conf /etc/supervisord.conf

# Copy startup script
COPY start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Expose Cloud Run port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start all services via supervisor
CMD ["/app/start.sh"]
